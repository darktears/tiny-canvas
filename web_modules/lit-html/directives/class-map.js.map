{"version":3,"file":"class-map.js","sources":["../../../node_modules/lit-html/directives/class-map.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n    constructor(element) {\n        this.classes = new Set();\n        this.changed = false;\n        this.element = element;\n        const classList = (element.getAttribute('class') || '').split(/\\s+/);\n        for (const cls of classList) {\n            this.classes.add(cls);\n        }\n    }\n    add(cls) {\n        this.classes.add(cls);\n        this.changed = true;\n    }\n    remove(cls) {\n        this.classes.delete(cls);\n        this.changed = true;\n    }\n    commit() {\n        if (this.changed) {\n            let classString = '';\n            this.classes.forEach((cls) => classString += cls + ' ');\n            this.element.setAttribute('class', classString);\n        }\n    }\n}\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    let previousClasses = previousClassesCache.get(part);\n    if (previousClasses === undefined) {\n        // Write static classes once\n        // Use setAttribute() because className isn't a string on SVG elements\n        element.setAttribute('class', committer.strings.join(' '));\n        previousClassesCache.set(part, previousClasses = new Set());\n    }\n    const classList = (element.classList || new ClassList(element));\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    previousClasses.forEach((name) => {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n            previousClasses.delete(name);\n        }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (value != previousClasses.has(name)) {\n            // We explicitly want a loose truthy check of `value` because it seems\n            // more convenient that '' and 0 are skipped.\n            if (value) {\n                classList.add(name);\n                previousClasses.add(name);\n            }\n            else {\n                classList.remove(name);\n                previousClasses.delete(name);\n            }\n        }\n    }\n    if (typeof classList.commit === 'function') {\n        classList.commit();\n    }\n});\n//# sourceMappingURL=class-map.js.map"],"names":["ClassList","[object Object]","element","this","classes","Set","changed","classList","getAttribute","split","cls","add","delete","classString","forEach","setAttribute","previousClassesCache","WeakMap","classMap","directive","classInfo","part","AttributePart","PropertyPart","committer","name","parts","length","Error","previousClasses","get","undefined","strings","join","set","remove","value","has","commit"],"mappings":";;;;;;;;;;;;;;AAeA,MAAMA,EACFC,YAAYC,GACRC,KAAKC,QAAU,IAAIC,IACnBF,KAAKG,SAAU,EACfH,KAAKD,QAAUA,EACf,MAAMK,GAAaL,EAAQM,aAAa,UAAY,IAAIC,MAAM,OAC9D,IAAK,MAAMC,KAAOH,EACdJ,KAAKC,QAAQO,IAAID,GAGzBT,IAAIS,GACAP,KAAKC,QAAQO,IAAID,GACjBP,KAAKG,SAAU,EAEnBL,OAAOS,GACHP,KAAKC,QAAQQ,OAAOF,GACpBP,KAAKG,SAAU,EAEnBL,SACI,GAAIE,KAAKG,QAAS,CACd,IAAIO,EAAc,GAClBV,KAAKC,QAAQU,QAASJ,GAAQG,GAAeH,EAAM,KACnDP,KAAKD,QAAQa,aAAa,QAASF,KAQ/C,MAAMG,EAAuB,IAAIC,QAUpBC,EAAWC,EAAWC,GAAeC,IAC9C,KAAMA,aAAgBC,IAAmBD,aAAgBE,GAC7B,UAAxBF,EAAKG,UAAUC,MAAoBJ,EAAKG,UAAUE,MAAMC,OAAS,EACjE,MAAM,IAAIC,MAAM,8GAGpB,MAAMJ,UAAEA,GAAcH,GAChBnB,QAAEA,GAAYsB,EACpB,IAAIK,EAAkBb,EAAqBc,IAAIT,QACvBU,IAApBF,IAGA3B,EAAQa,aAAa,QAASS,EAAUQ,QAAQC,KAAK,MACrDjB,EAAqBkB,IAAIb,EAAMQ,EAAkB,IAAIxB,MAEzD,MAAME,EAAaL,EAAQK,WAAa,IAAIP,EAAUE,GAItD2B,EAAgBf,QAASW,IACfA,KAAQL,IACVb,EAAU4B,OAAOV,GACjBI,EAAgBjB,OAAOa,MAI/B,IAAK,MAAMA,KAAQL,EAAW,CAC1B,MAAMgB,EAAQhB,EAAUK,GACpBW,GAASP,EAAgBQ,IAAIZ,KAGzBW,GACA7B,EAAUI,IAAIc,GACdI,EAAgBlB,IAAIc,KAGpBlB,EAAU4B,OAAOV,GACjBI,EAAgBjB,OAAOa,KAIH,mBAArBlB,EAAU+B,QACjB/B,EAAU+B"}